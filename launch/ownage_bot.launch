<launch>
  <env name="ROSCONSOLE_CONFIG_FILE"
       value="$(find baxter_collaboration)/rosconsole.conf"/>

  <arg name="is_simulation" default="false"/>
  <arg name="is_manual" default="false"/>

  <param name="is_simulation" type="bool" value="$(arg is_simulation)"/>
  <param name="is_manual" type="bool" value="$(arg is_manual)"/>
  
  <!-- Avatars are specific objects which represent owners -->
  <arg name="avatar_ids" default="[200,152]"/>
  <!-- Landmarks are special objects which define geographical areas -->
  <arg name="landmark_ids" default="[0]"/>

  <!-- Threshold of confidence for picking up objects-->
  <param name="collect_threshold" type="double" value="0.2" />
  <!-- Duration before each tracked object has its properties updated -->
  <param name="tracker_latency" type="double" value="0.2" />

  <rosparam param="home_area" subst_value="true">
    lower: [0.39, 0.07, 0]
    upper: [0.62, 0.29, 0]
  </rosparam>
  
  <rosparam param="avatar_ids" subst_value="true">
  $(arg avatar_ids)</rosparam>
  <rosparam param="landmark_ids" subst_value="true">
  $(arg landmark_ids)</rosparam>

  <!-- Metrics which object_tester uses to generate clusters -->
  <rosparam param="metrics">['proximity']</rosparam>
  
  <group ns="ownage_bot">
    <!-- Object tracker node, unused in simulation mode-->
    <node pkg="ownage_bot" type="object_tracker.py"
	  name="object_tracker" unless="$(arg is_simulation)">
    </node>
    <!-- Object collector node, unused in manual and simulation modes -->
    <node pkg="ownage_bot" type="object_collector.py"
	  name="object_collector" output="screen"
	  unless="$(eval is_simulation or is_manual)">
    </node>
    <!-- Object classifier node-->
    <node pkg="ownage_bot" type="object_classifier.py"
          name="object_classifier" output="screen"
	  unless="$(arg is_manual)">
    </node>
    <!-- Object tester node, only runs in simulation -->
    <node pkg="ownage_bot" type="object_tester.py"
          name="object_tester" output="screen"
	  if="$(arg is_simulation)">
    </node>
    
  </group>

  <!-- provides actions on left arm -->
  <node pkg="ownage_bot" type="object_picker"
	name="object_picker" output="screen"
	unless="is_simulation">
  </node>

  <!-- show image from camera -->
  <node name="image_view_AR" pkg="image_view"
	type="image_view" respawn="false"
	unless="is_simulation"> <!-- output="log" -->
    <remap from="image" to="/aruco_marker_publisher/result"/>
    <param name="autosize" value="true" />
  </node>

  <!-- ARUCO ROS -->
  <arg name="markerSize" default="0.0381"/> <!-- in m -->
  <arg name="ref_frame" default="/base"/>
  <!-- leave empty and the pose will be published wrt param parent_name -->

  <param name="aruco_marker_publisher/image_is_rectified" value="True"/>
  <param name="aruco_marker_publisher/marker_size"
	 value="$(arg markerSize)"/>
  <param name="aruco_marker_publisher/reference_frame"
	 value="$(arg ref_frame)"/>
  <param name="aruco_marker_publisher/camera_frame"
	 value="/left_hand_camera"/>

  <node pkg="aruco_ros" type="marker_publisher"
	name="aruco_marker_publisher" respawn="true"
	unless="is_simulation">
    <remap from="image" to="/cameras/left_hand_camera/image"/>
    <remap from="camera_info" to="/cameras/left_hand_camera/camera_info"/>
  </node>

</launch>

