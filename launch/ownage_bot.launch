<launch>
  <arg name="simulation" default="false"/>
  <arg name="manual" default="false"/>
  <arg name="use_speech" default="false"/>
  <arg name="record_screen" default="false"/>
  <arg name="record_world" default="false"/>
  <arg name="scenario" default="blocks_world"/>

  <arg name="avatar_ids" default="[]"/>
  
  <param name="simulation" type="bool" value="$(arg simulation)"/>
  <param name="manual" type="bool" value="$(arg manual)"/>
    
  <group ns="ownage_bot">
    <!-- Avatars are specific objects which represent owners -->
    <rosparam param="avatar_ids" subst_value="true">
    $(arg avatar_ids)</rosparam>

    <!-- Load structured speech corpus -->
    <rosparam command="load" param="speech_corpus"
      	      file="$(find ownage_bot)/speech/structured_corpus.yaml" />
    
    <!-- Load area parameters -->
    <rosparam command="load" param="areas"
	      file="$(find ownage_bot)/params/areas.yaml" />

    <!-- Load path parameters -->
    <rosparam command="load" param="paths"
	      file="$(find ownage_bot)/params/paths.yaml" />
    
    <!-- Load category parameters -->
    <rosparam param="categories">
      ["block", "mug", "pen", "laptop", "wallet", "charger", "wrapper"]
    </rosparam>

    <!-- Load color parameters -->
    <rosparam param="colors">
        red : [[160, 70, 10], [10, 166, 66]]
        green : [[30, 80, 20], [100, 246, 96]]
        blue : [[80, 120, 70], [130, 216, 146]]
    </rosparam>

    <!-- Load color labels for specific objects -->
    <rosparam param="color_labels">
      red : [2, 12, 19]
      green : [4, 5, 9, 10]
      blue : [1, 3, 6]
    </rosparam>
       
    <!-- Load simulation and scenario parameters -->
    <group if="$(arg simulation)">
      <!-- Reload area parameters for simulated world -->
      <rosparam command="load" param="areas"
	      file="$(find ownage_bot)/params/sim_areas.yaml" />
      <rosparam command="load" param="blocks_world"
	      file="$(find ownage_bot)/params/blocks_world.yaml" />
    </group>

    <!-- World display node (actual)-->
    <node pkg="ownage_bot" type="world_display.py"
	  name="world_display" unless="$(arg simulation)">
      <param name="swap_xy" type="bool" value="true"/>
      <param name="flip_xy" type="bool" value="true"/>
    </node>

    <!-- World display node (simulated)-->
    <node pkg="ownage_bot" type="world_display.py"
	  name="world_display" if="$(arg simulation)">
      <param name="swap_xy" type="bool" value="false"/>
      <param name="flip_xy" type="bool" value="false"/>
      <rosparam param="origin">[-1.0, -0.6]</rosparam>	    
    </node>
    
    <!-- Object tracker node (actual) -->
    <node pkg="ownage_bot" type="baxter_tracker.py"
	  output="screen" name="object_tracker" unless="$(arg simulation)">
      <!-- How often (in seconds) objects get updated -->
      <param name="aruco_latency" type="double" value="0.1"/>
      <param name="endpoint_latency" type="double" value="0.1"/>
      <!-- Flags for ownership inference and extrapolation-->
      <param name="disable_inference" type="bool" value="false"/>
      <param name="disable_extrapolate" type="bool" value="false"/>
    </node>

    <!-- Object tracker node (simulated) -->
    <node pkg="ownage_bot" type="simulated_tracker.py"
	  output="screen" name="object_tracker" if="$(arg simulation)">
      <!-- How often (in seconds) objects get updated -->
      <param name="simulated_latency" type="double" value="0.1"/>
      <param name="default_prior" type="double" value="0.5"/>
      <!-- Flags for ownership inference and extrapolation-->
      <param name="disable_inference" type="bool" value="false"/>
      <param name="disable_extrapolate" type="bool" value="true"/>
      <param name="hardcode_color" type="bool" value="true"/>
    </node>

    <!-- Agent tracker node -->
    <node pkg="ownage_bot" type="agent_tracker.py"
	  output="screen" name="agent_tracker">
      <!-- How often (in seconds) objects get updated -->
      <param name="simulated_latency" type="double" value="0.1"/>
    </node>
    
    <!-- World simulator, provides simulated environment and actions -->
    <node pkg="ownage_bot" type="world_simulator.py"
      	  name="world_simulator" output="screen" if="$(arg simulation)">
      <param name="scenario" type="string" value="$(arg scenario)"/>
      <param name="ground_lvl" type="double" value="0.0"/>
      <param name="arm_lvl" type="double" value="0.3"/>
    </node>
    
    <!-- Task manager node -->
    <node pkg="ownage_bot" type="task_manager.py"
          name="task_manager" output="screen" unless="$(arg manual)">
    </node>

    <!-- Rule manager node -->
    <node pkg="ownage_bot" type="rule_manager.py"
          name="rule_manager" output="screen" unless="$(arg manual)">
    </node>
    
    <!-- Dialog manager node -->
    <node pkg="ownage_bot" type="dialog_manager.py"
          name="dialog_manager" output="screen" unless="$(arg manual)">
    </node>

    <!-- Command prompt node -->
    <node pkg="ownage_bot" type="command_prompt.py"
          name="command_prompt" output="screen" unless="$(arg manual)"
	  launch-prefix="gnome-terminal --geometry=80x43 --command">
    </node>

    <!-- Screen manager node -->
    <node pkg="ownage_bot" type="screen_manager.py"
	  name="screen_manager" unless="$(arg simulation)">
    </node>

  </group>
  
  <!-- Provides actions on Baxter's arms -->
  <node pkg="ownage_bot" type="action_provider" name="action_provider"
	output="screen" unless="$(arg simulation)">
    <remap from="/markers/left"  to="/aruco_marker_publisher/markers"/>
    <remap from="/markers/right" to="/aruco_marker_publisher/markers"/>
  </node>
    
  <!-- Runs ARuCo and displays camera image -->
  <include file="$(find ownage_bot)/launch/aruco_marker_publisher.launch"
	   unless="$(arg simulation)"/>

  <!-- Launch speech nodes if speech flag is set-->
  <include file="$(find ownage_bot)/launch/speech_processor.launch"
	   if="$(arg use_speech)"/>
  
  <!-- Show the world display in a window -->
  <node name="world_view" pkg="image_view"
        type="image_view" respawn="false">
    <remap from="image" to="/ownage_bot/world_display"/>
    <param name="autosize" value="true" />
  </node>

  <!-- Records video sent to screen -->
  <node name="screen_recorder" pkg="image_view" type="video_recorder"
	respawn="false" output="log" if="$(arg record_screen)">
    <remap from="image" to="/robot/xdisplay"/>
    <param name="filename" value="$(find ownage_bot)/screen.avi" />
    <param name="fps" value="30" />
    <param name="encoding" value="rgb8" />
  </node>

  <!-- Records video of world display -->
  <node name="world_recorder" pkg="image_view" type="video_recorder"
	respawn="false" output="log" if="$(arg record_world)">
    <remap from="image" to="/ownage_bot/world_display"/>
    <param name="filename" value="$(find ownage_bot)/world_display.avi" />
    <param name="fps" value="30" />
    <param name="encoding" value="rgb8" />
  </node>

</launch>

